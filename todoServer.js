/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,

  - For any other route not defined in the server return 404
*/

const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const fs = require('fs');
const port = 3000;
const path = require("path");

app.use(bodyParser.json());

//array of object conatining id and tasks
let todoItems = [];
let i = 1;

// 1.GET /todos - Retrieve all todo items
//     Description: Returns a list of all todo items.
//     Response: 200 OK with an array of todo items in JSON format.
//     Example: GET http://localhost:3000/todos

app.get('/todos', (req, res) =>{
  res.json(todoItems);
  // fs.readFile('todos.json', 'utf-8', (err, data)=>{
  //   if(err) throw err;
  //   res.json(JSON.parse(data)); //JSON.parse will read in json format since readFIle think that everything is a string
  // })
  // res.status(200).json(todoItems);
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123

app.get('/todos/:id', (req, res)=>{
  let requestedID = req.params.id;
  requestedID = parseInt(requestedID, 10); //because the id of the object is an integer and the id passed by url is normally a string

  let foundItem = null;

  todoItems.forEach((object) => {
    if(object.id === requestedID){
      foundItem = object;
    }
  })
  
  if(foundItem){
    res.status(200).json(foundItem);
  }else{
    res.status(404).send("not found");
  }
});

// 3. POST /todos - Create a new todo item
// Description: Creates a new todo item.
// Request Body: JSON object representing the todo item.
// Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
// Example: POST http://localhost:3000/todos
// Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

app.post('/todos', (req, res) =>{
  let objectCreated = req.body;
  objectCreated.id = i;
  i = i+1;
  todoItems.push(objectCreated);
  res.status(201).json(objectCreated);
})

// 4. PUT /todos/:id - Update an existing todo item by ID
// Description: Updates an existing todo item identified by its ID.
// Request Body: JSON object representing the updated todo item.
// Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
// Example: PUT http://localhost:3000/todos/123
// Request Body: { "title": "Buy groceries", "completed": true }
app.put('/todos/:id', (req, res) => {
  let requestedId = req.params.id;
  let updatedData = req.body;

  requestedId = parseInt(requestedId, 10);
  let found = false;

  todoItems.forEach((object) => {
    if (object.id === requestedId) {
      // Update individual properties of the todo item
      object.title = updatedData.title;
      object.completed = updatedData.completed;

      // Respond with the updated todo item
      found = true;
    }
  });

  if (found) {
    res.status(200).send("Item has been found and updated");
  } else {
    res.status(404).send("Not found");
  }
});

// 5. DELETE /todos/:id - Delete a todo item by ID
// Description: Deletes a todo item identified by its ID.
// Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
// Example: DELETE http://localhost:3000/todos/123

app.delete('/todos/:id', (req, res) =>{
  let whatID = req.params.id;
  let todoIndex = -1;
  todoItems.forEach((object, index)=>{
    if(object.id === whatID){
      todoIndex = index;
    }
  })

  if(todoIndex!==-1){
    const removeItem = todoItems[todoIndex];
    todoItems.splice(todoIndex, 1);
    res.status(200).json(removeItem[0]);
  }else{
    res.status(404).send("not found");
  }
});

app.use((req, res) => {
  res.status(404).send('Not Found');
});


app.listen(3000, ()=>{
  console.log("yes app is listening on 3000");
})



module.exports = app;
